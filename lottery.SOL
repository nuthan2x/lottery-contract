//SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.7;

contract lottery{

        address public manager;
        address payable[] public players;
        address payable lucky1;

        constructor(){
             manager  = msg.sender;
        }

        // declaring the receive() function that is necessary to receive ETH
        receive() external payable{
            require(msg.value == 0.1 ether);
            require (msg.sender != manager);
            players.push(payable(msg.sender));
        }

         
        function getbalance() view public returns(uint){
            require(msg.sender == manager);
            return address(this).balance;
            
        }

        // helper function that returns a big random integer (64 bytes)
        function random() view public returns(uint){
            return uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,players.length)));
        }

        // selecting the winner
        function winner()   public  {
            uint r = random() % players.length ;
            address payable lucky = players[r];

             lucky1 = lucky;
             
        }

        function release() public view returns(address payable){
                return lucky1;
        }

        function adder() public {
            
        }
        // maager approving the pool total to the winner
        function settle() public {
            require(msg.sender == manager);
            require(players.length >= 2);
            uint  fee = getbalance() * 10/100 ;  // 10% fee for contract caller
            payable(manager).transfer(fee);
            
        
            lucky1.transfer(getbalance()); 
            players = new address payable[](0); 
        }
           
}
